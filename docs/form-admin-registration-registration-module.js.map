{"version":3,"sources":["webpack:///./src/app/layout/form/admin/registration/registration-routing.module.ts","webpack:///./src/app/layout/form/admin/registration/registration.component.html","webpack:///./src/app/layout/form/admin/registration/registration.component.scss","webpack:///./src/app/layout/form/admin/registration/registration.component.ts","webpack:///./src/app/layout/form/admin/registration/registration.module.ts","webpack:///./src/app/layout/form/admin/registration/registration.service.ts","webpack:///./src/environments/environment.prod.ts"],"names":[],"mappings":"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","file":"form-admin-registration-registration-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {RegistrationComponent} from './registration.component';\r\n\r\nconst routes: Routes =[\r\n {\r\n    path: '',component:RegistrationComponent\r\n }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class RegistrationRoutingModule{\r\n    \r\n}\r\n","module.exports = \"<div *ngIf=\\\"resultMsg\\\">{{resultMsg}}</div>\\r\\n<form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n    <div class=\\\"card-header titlecss\\\"><i class=\\\"fa fa-user-plus\\\" style=\\\"color:#ffff\\\">&nbsp;&nbsp;</i>Registration</div><br>\\r\\n    <!-- Personal Information card Start-->\\r\\n    <div class=\\\"card\\\">\\r\\n        <div class=\\\"card-header\\\">Personal Information </div>\\r\\n\\r\\n        <div class=\\\"card-body\\\">\\r\\n\\r\\n            <div style=\\\"font-family: 'Gill Sans';color: rgb(102, 99, 99);\\\">Walkin : <input type=\\\"checkbox\\\"\\r\\n                    formControlName=\\\"walkin\\\"> </div>\\r\\n\\r\\n            <fieldset class=\\\"scheduler-border\\\">\\r\\n                <legend class=\\\"scheduler-border\\\">Please fill the details</legend>\\r\\n\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"walkinNo\\\" placeholder=\\\"Walkin No\\\">\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Walkin Date\\\" formControlName=\\\"walkinDate\\\" readonly>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Reg Number\\\" formControlName=\\\"registrationNo\\\" readonly>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <select formControlName=\\\"regTitle\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regTitle.touched) && f.regTitle.errors }\\\">\\r\\n                            <option value=\\\"\\\" disabled selected>Select Title</option>\\r\\n                            <option *ngFor=\\\"let each of masterTitle\\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regTitle.touched) && f.regTitle.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regTitle.errors.required\\\">Title is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regPatFamilyName\\\" class=\\\"form-control\\\" placeholder=\\\"Family Name\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.regPatFamilyName.touched) && f.regPatFamilyName.errors }\\\" />\\r\\n                        <div *ngIf=\\\" (submitted || f.regPatFamilyName.touched) && f.regPatFamilyName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regPatFamilyName.errors.required\\\">Family Name is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regPatName\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.regPatName.touched) && f.regPatName.errors }\\\">\\r\\n                        <div *ngIf=\\\"(submitted || f.regPatName.touched) && f.regPatName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regPatName.errors.required\\\"> Name is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <!-- <div class=\\\"col\\\">\\r\\n                    <input type=\\\"text\\\" formControlName=\\\"regPatmiddleName\\\" class=\\\"form-control\\\" placeholder=\\\"Middle Name\\\">\\r\\n                </div> -->\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <select formControlName=\\\"regSex\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regSex.touched) && f.regSex.errors }\\\">\\r\\n                            <option value=\\\"\\\" disabled selected>Select Gender</option>\\r\\n                            <option *ngFor=\\\"let each of masterGender \\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regSex.touched) && f.regSex.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regSex.errors.required\\\"> Gender is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <select formControlName=\\\"regMarried\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regMarried.touched) && f.regMarried.errors }\\\">\\r\\n\\r\\n                            <option value=\\\"\\\" disabled selected>Select Marital Status</option>\\r\\n                            <option *ngFor=\\\"let each of masterMaritalStatus \\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regMarried.touched) && f.regMarried.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regMarried.errors.required\\\"> Marital Status is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"DataOfBirth\\\" bsDatepicker formControlName=\\\"regCalculatedDob\\\"\\r\\n                            [(ngModel)]=\\\"selectedDob\\\" class=\\\"form-control\\\" (ngModelChange)=\\\"onselectedDob($event)\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.regCalculatedDob.touched) && f.regCalculatedDob.errors }\\\" />\\r\\n\\r\\n                        <div *ngIf=\\\" (submitted || f.regCalculatedDob.touched) && f.regCalculatedDob.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regCalculatedDob.errors.required\\\"> Date Of Birth is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                \\r\\n                <div class=\\\"row\\\">\\r\\n\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Age\\\"  formControlName=\\\"regAge\\\"  [(ngModel)]=\\\"age\\\" (keypress)=_keyPress($event)\\r\\n                            (ngModelChange)=\\\"onselectedAge($event)\\\" >\\r\\n                      \\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <select formControlName=\\\"regAgeType\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regAgeType.touched) && f.regAgeType.errors }\\\">\\r\\n                            <option value=\\\"\\\" disabled selected>Select Age Type</option>\\r\\n                            <option value=\\\"Y\\\">Years</option>\\r\\n                            <option value=\\\"M\\\">Months</option>\\r\\n                            <option value=\\\"D\\\">Days</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regAgeType.touched) && f.regAgeType.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regAgeType.errors.required\\\"> Age Type is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" placeholder=\\\"Anniversary Date\\\" bsDatepicker formControlName=\\\"regAnnivDate\\\"\\r\\n                            class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regAnnivDate.touched) && f.regAnnivDate.errors }\\\" />\\r\\n                        <div *ngIf=\\\"(submitted || f.regAnnivDate.touched) && f.regAnnivDate.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regAnnivDate.errors.required\\\"> Anniversary Date is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n          \\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <select formControlName=\\\"regReligion\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regReligion.touched) && f.regReligion.errors }\\\">\\r\\n                            <option value=\\\"\\\" disabled selected>Select Religion</option>\\r\\n                            <option *ngFor=\\\"let each of masterReligion \\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regReligion.touched) && f.regReligion.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regReligion.errors.required\\\"> Religion is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <select formControlName=\\\"regOccPn\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regOccPn.touched) && f.regOccPn.errors }\\\">\\r\\n                            <option value=\\\"\\\" disabled selected>Select Occupation</option>\\r\\n                            <option *ngFor=\\\"let each of masterOccupation \\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regOccPn.touched) && f.regOccPn.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regOccPn.errors.required\\\"> Occupation is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"\\r\\n                            col\\\">\\r\\n                        <select formControlName=\\\"regNationality\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regNationality.touched) && f.regNationality.errors }\\\">\\r\\n                            <option value=\\\"\\\" disabled selected>Select Nationality</option>\\r\\n                            <option *ngFor=\\\"let each of masterNationality \\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                        </select>\\r\\n                        <div *ngIf=\\\"(submitted || f.regNationality.touched) && f.regNationality.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regNationality.errors.required\\\"> Nationality is required</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n\\r\\n                    <!-- <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regPatStatus\\\" placeholder=\\\"Patient Status\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': submitted && f.regPatStatus.errors }\\\">\\r\\n                        <div *ngIf=\\\"submitted && f.regPatStatus.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.regPatStatus.errors.required\\\">Patient status is required</div>\\r\\n                        </div>\\r\\n                    </div> -->\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regMobileNo\\\" (keypress)=_keyPress($event)  placeholder=\\\"Mobile No\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regMobileNo.touched) && f.regMobileNo.errors }\\\"/> \\r\\n                        <div *ngIf=\\\"(submitted || f.regMobileNo.touched) && f.regMobileNo.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"f.regMobileNo.errors.required\\\">Mobile No is required</div>\\r\\n                                <div *ngIf=\\\"f.regMobileNo.errors.maxlength\\\">Mobile No must be 10 digits </div>\\r\\n                                <div *ngIf=\\\"f.regMobileNo.errors.minlength\\\">Mobile No must be 10 digits </div>\\r\\n                                <div *ngIf=\\\"f.regMobileNo.errors.pattern\\\">Enter Valid Mobile No</div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regResPhone\\\" (keypress)=_keyPress($event)  placeholder=\\\"Phone No\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regResPhone.touched) && f.regResPhone.errors }\\\"/>\\r\\n                        <div *ngIf=\\\"(submitted || f.regResPhone.touched) && f.regResPhone.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                <div *ngIf=\\\"f.regResPhone.errors.required\\\">Phone No is required</div>\\r\\n                                <div *ngIf=\\\"f.regResPhone.errors.maxlength\\\">Phone No must be 10 digits </div>\\r\\n                                <div *ngIf=\\\"f.regResPhone.errors.minlength\\\">Phone No must be 10 digits </div>\\r\\n                                <div *ngIf=\\\"f.regResPhone.errors.pattern\\\">Enter Valid Phone No</div>\\r\\n                        </div>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\">\\r\\n\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regEmail\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\">\\r\\n                        <!-- <div *ngIf=\\\"submitted && f.regEmail.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                             <div *ngIf=\\\"f.regEmail.errors.required\\\">Email is required</div> \\r\\n                            <div *ngIf=\\\"f.regEmail.errors.email\\\">Email must be a valid email address</div>\\r\\n                        </div> -->\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col\\\">\\r\\n                        <input type=\\\"text\\\" formControlName=\\\"regFaxNo\\\" placeholder=\\\"Fax No\\\" class=\\\"form-control\\\">\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </fieldset>\\r\\n            <!--Communication Address Collapse Start-->\\r\\n            <div class=\\\"container\\\">\\r\\n\\r\\n                <button type=\\\"button\\\" (click)=\\\"addressCollapse()\\\" class=\\\"btn btn-primary collasps-btn\\\">Communication\\r\\n                    Address</button><br>\\r\\n\\r\\n                <div [hidden]=\\\"isCollapsed\\\">\\r\\n                    <br>\\r\\n                    <fieldset class=\\\"scheduler-border\\\">\\r\\n                        <legend class=\\\"scheduler-border\\\">Please fill the details</legend>\\r\\n\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regHno\\\" placeholder=\\\"House No\\\" class=\\\"form-control\\\">\\r\\n\\r\\n                            </div>\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regStreet\\\" placeholder=\\\"Street\\\" class=\\\"form-control\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regCity\\\" placeholder=\\\"City\\\" class=\\\"form-control\\\">\\r\\n\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <select formControlName=\\\"regCountry\\\" class=\\\"select-dropdown form-control\\\"  (ngModelChange)=\\\"onselectedCountry($event)\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regCountry.touched) && f.regCountry.errors }\\\">\\r\\n                                    <option value=\\\"\\\" disabled selected>Select Country</option>\\r\\n                                    <option *ngFor=\\\"let each of masterCountry \\\" value=\\\"{{each.key}}\\\">{{each.value}}</option>\\r\\n                                </select>\\r\\n                                <div *ngIf=\\\"(submitted || f.regCountry.touched) && f.regCountry.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.regCountry.errors.required\\\"> Country is required</div>\\r\\n                                </div>\\r\\n\\r\\n                            </div>\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <select formControlName=\\\"regState\\\" class=\\\"select-dropdown form-control\\\"\\r\\n                                    (ngModelChange)=\\\"onselectedState($event)\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regState.touched) && f.regState.errors }\\\">\\r\\n                                    <option value=\\\"\\\" disabled selected>Select State</option>\\r\\n                                    <option *ngFor=\\\"let each of masterState \\\" value=\\\"{{each.key}}\\\">{{each.value}}</option>\\r\\n                                </select>\\r\\n                                <div *ngIf=\\\"(submitted || f.regState.touched) && f.regState.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.regState.errors.required\\\"> State is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <select formControlName=\\\"regArea\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regArea.touched) && f.regArea.errors }\\\">\\r\\n                                    <option value=\\\"\\\" disabled selected>Select District</option>\\r\\n                                    <option *ngFor=\\\"let each of masterDistrict \\\" value=\\\"{{each.key}}\\\">{{each.value}}</option>\\r\\n                                </select>\\r\\n                                <div *ngIf=\\\"(submitted || f.regArea.touched) && f.regArea.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.regArea.errors.required\\\"> Distrcit is required</div>\\r\\n                                </div>\\r\\n\\r\\n                            </div>\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regPin\\\" (keypress)=_keyPress($event) placeholder=\\\"Pincode\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regPin.touched) && f.regPin.errors }\\\"/>\\r\\n                                <div *ngIf=\\\"(submitted || f.regPin.touched) && f.regPin.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.regPin.errors.required\\\">Pin code is required</div>\\r\\n                                    <div *ngIf=\\\"f.regPin.errors.maxlength\\\">Pin code must be 6 digits </div>\\r\\n                                    <div *ngIf=\\\"f.regPin.errors.minlength\\\">Pin code must be 6 digits </div>\\r\\n                                    </div>\\r\\n\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </fieldset>\\r\\n                </div>\\r\\n            </div>\\r\\n            <!--Communication Address Collapse End-->\\r\\n            <!--Miscellneous Collapse Start-->\\r\\n\\r\\n            <div class=\\\"container\\\">\\r\\n                <button type=\\\"button\\\" (click)=\\\"miscellneousCollapse()\\\" class=\\\"btn btn-primary collasps-btn\\\">Miscellneous\\r\\n                    Information\\r\\n                </button>\\r\\n                <div [hidden]=\\\"ismiscellneousCollapse\\\">\\r\\n                    <br>\\r\\n                    <fieldset class=\\\"scheduler-border\\\">\\r\\n                        <legend class=\\\"scheduler-border\\\">Please fill the details</legend>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <select formControlName=\\\"regBldGrp\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.regBldGrp.touched) && f.regBldGrp.errors }\\\">\\r\\n                                    <option value=\\\"\\\" disabled selected>Select Blood Group</option>\\r\\n                                    <option *ngFor=\\\"let each of masterBloodGrup \\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n                                </select>\\r\\n                                <div *ngIf=\\\"(submitted || f.regBldGrp.touched) && f.regBldGrp.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.regBldGrp.errors.required\\\"> Blood group is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"\\r\\n                                    col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"hospitalMr\\\" placeholder=\\\"Hospital MR\\\" class=\\\"form-control\\\">\\r\\n\\r\\n                            </div>\\r\\n\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regCpAddress\\\" placeholder=\\\"Address...\\\" class=\\\"form-control\\\">\\r\\n                            </div>\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <select formControlName=\\\"knowAboutUs\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.knowAboutUs.touched) && f.knowAboutUs.errors }\\\">\\r\\n                                        <option value=\\\"\\\" disabled selected>How did you know about us?</option>\\r\\n                                        <option value=\\\"Friends\\\">Friends</option>\\r\\n                                        <option value=\\\"Ad\\\">Ad</option>\\r\\n                                        <option value=\\\"Internet\\\">Internet</option>\\r\\n                                        <option value=\\\"Referred by Hospital\\\">Referred by Hospital</option>\\r\\n                                        <option value=\\\"Others\\\">Others</option>\\r\\n\\r\\n                                </select>\\r\\n                                <div *ngIf=\\\"(submitted || f.knowAboutUs.touched) && f.knowAboutUs.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"f.knowAboutUs.errors.required\\\"> Please fill out the filed</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                        </div>\\r\\n                    </fieldset>\\r\\n                </div>\\r\\n            </div>\\r\\n            <!--Miscellneous  Collapse End-->\\r\\n            <!--Family Details  Collapse Start-->\\r\\n            <div class=\\\"container\\\">\\r\\n                <button type=\\\"button\\\" (click)=\\\"familyCollapse()\\\" class=\\\"btn btn-primary collasps-btn\\\">Family\\r\\n                    Details\\r\\n                </button>\\r\\n                <div [hidden]=\\\"isFamilyCollapse\\\">\\r\\n                    <br>\\r\\n                    <fieldset class=\\\"scheduler-border\\\">\\r\\n                        <legend class=\\\"scheduler-border\\\">Please fill the details</legend>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regPsprtNo\\\" placeholder=\\\"Passport No\\\" class=\\\"form-control\\\">\\r\\n\\r\\n                            </div>\\r\\n                            <div class=\\\"col\\\">\\r\\n\\r\\n                                <input type=\\\"text\\\" placeholder=\\\"issued on\\\" bsDatepicker formControlName=\\\"regPsprtIssdt\\\"\\r\\n                                    class=\\\"form-control\\\" />\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" placeholder=\\\"Valid upto\\\" bsDatepicker formControlName=\\\"regPsprtExdt\\\"\\r\\n                                    class=\\\"form-control\\\" />\\r\\n                            </div>\\r\\n                            <div class=\\\"col\\\">\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"regDrLicense\\\" placeholder=\\\"Driving License No\\\" class=\\\"form-control\\\">\\r\\n\\r\\n                            </div>\\r\\n\\r\\n                        </div>\\r\\n                    </fieldset>\\r\\n                </div>\\r\\n            </div>\\r\\n            <!--Family Details  Collapse End-->\\r\\n            <div style=\\\"font-family: Gill Sans;\\\"><textarea class=\\\"form-control\\\" formControlName=\\\"remarks\\\" class=\\\"form-control\\\"\\r\\n                    placeholder=\\\"Enter Remarks...\\\"></textarea></div><br>\\r\\n            <div style=\\\"float: right;\\\">\\r\\n                <button class=\\\"btn btn-outline-primary\\\" [disabled]=\\\"!addForm.valid\\\">Register</button>&nbsp;&nbsp;\\r\\n                <button type=\\\"reset\\\" (click)=\\\"clear()\\\" class=\\\"btn btn-outline-primary\\\">Clear</button>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <!-- Personal Information card End-->\\r\\n\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { routerTransition } from '../../../../router.animations';\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Registration } from '../models/Registration';\r\nimport { MembershipRegistration } from '../models/MembershipRegistration';\r\n\r\nimport { MasterTitle } from \"../models/MasterTitle\";\r\nimport { RegistrationService } from './registration.service';\r\nimport { MasterGender } from \"../models/MasterGender\";\r\nimport { MasterNationality } from \"../models/MasterNationality\";\r\nimport { MasterCountry } from \"../models/MasterCountry\";\r\nimport { MasterState } from \"../models/masterState\";\r\nimport { MasterDistrict } from \"../models/MasterDistrict\";\r\nimport { MasterOccupation } from \"../models/MasterOccupation\";\r\nimport { MasterReligion } from \"../models/MasterReligion\";\r\nimport { MasterMaritalStatus } from \"../models/MasterMaritalStatus\";\r\nimport { MasterBloodGroup } from \"../models/MasterBloodGroup\";\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { TokenStorageService } from '../../../../auth/token-storage.service';\r\n\r\nimport * as jsPDF from 'jspdf';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  constructor(private token: TokenStorageService, private formBuilder: FormBuilder, private registrationService: RegistrationService, private route: ActivatedRoute,\r\n    private router: Router) { }\r\n\r\n  addForm: FormGroup;\r\n  isCollapsed: boolean = true;\r\n  ismiscellneousCollapse: boolean = true;\r\n  isFamilyCollapse: boolean = true;\r\n  submitted = false;\r\n  public resultMsg: String;\r\n  info: any;\r\n  public selectedDob: any;\r\n  public age: number;\r\n\r\n  registration: Registration[];\r\n  membershipRegistration: MembershipRegistration[];\r\n\r\n  masterTitle: Array<MasterTitle> = [];\r\n  masterGender: Array<MasterGender> = [];\r\n  masterNationality: Array<MasterNationality> = [];\r\n  masterCountry: Array<MasterCountry> = [];\r\n  masterState: Array<MasterState> = [];\r\n\r\n  masterOccupation: Array<MasterOccupation> = [];\r\n  masterReligion: Array<MasterReligion> = [];\r\n  masterBloodGrup: Array<MasterBloodGroup> = [];\r\n  masterMaritalStatus: Array<MasterMaritalStatus> = [];\r\n  masterDistrict: Array<MasterDistrict> = [];\r\n\r\n\r\n  ngOnInit() {\r\n\r\n    this.info = {\r\n      token: this.token.getToken(),\r\n      username: this.token.getUsername(),\r\n      authorities: this.token.getAuthorities()\r\n    };\r\n\r\n    //Reactive Form\r\n    this.addForm = this.formBuilder.group({\r\n\r\n      walkin: [],\r\n      walkinNo: [],\r\n      walkinDate: [],\r\n      registrationNo: [],\r\n\r\n      regTitle: ['', Validators.required],\r\n      regPatName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(10)]],\r\n      regPatLastName: [],\r\n      regPatFamilyName: ['', Validators.required],\r\n      regSex: ['', Validators.required],\r\n      regMarried: ['', Validators.required],\r\n      regCalculatedDob: ['', Validators.required],\r\n      regAge: [],\r\n      regAgeType: ['', Validators.required],\r\n      regReligion: ['', Validators.required],\r\n      regOccPn: ['', Validators.required],\r\n      regNationality: ['', Validators.required],\r\n      regAnnivDate: ['', Validators.required],\r\n      regPatStatus: [],\r\n      remarks: [],\r\n      regMobileNo: ['', [Validators.required,Validators.maxLength(10),Validators.minLength(10),Validators.pattern(/^[6-9]\\d{9}$/)]],\r\n      regResPhone: ['',[Validators.maxLength(10),Validators.minLength(10),Validators.pattern(/^[6-9]\\d{9}$/)]],\r\n      regFaxNo: ['', Validators.required],\r\n      regEmail: [],\r\n\r\n\r\n      regHno: [],\r\n      regStreet: [],\r\n      regCity: [],\r\n      regArea: ['', Validators.required],\r\n      regState: ['', Validators.required],\r\n      regCountry: ['', Validators.required],\r\n      regPin: ['',[Validators.maxLength(6),Validators.minLength(6)]],\r\n\r\n      regBldGrp: ['', Validators.required],\r\n      hospitalMr: [],\r\n      regCpAddress: [],\r\n      knowAboutUs: ['', Validators.required],\r\n\r\n      regPsprtNo: [],\r\n      regPsprtIssdt: null,\r\n      regPsprtExdt: null,\r\n\r\n      regDrLicense:[],\r\n\r\n\r\n    })\r\n\r\n    //Get Countries From Master Countries Table\r\n    let array = [];\r\n    this.registrationService.getCountries().subscribe((data: MasterCountry[]) => {\r\n      this.masterCountry = data;\r\n      console.log(this.masterCountry);\r\n      const mapped = Object.keys(this.masterCountry).map(key => ({ type: key, value: this.masterCountry[key] }));\r\n      console.log(mapped);\r\n      for (let each in data) {\r\n\r\n        array.push({ \"key\": each, \"value\": data[each] })\r\n        this.masterCountry = array;\r\n      }\r\n    });\r\n\r\n    //Get Titles From Master Title Table\r\n    let masterTitlearray = [];\r\n    this.registrationService.gettitles().subscribe((data: MasterTitle[]) => {\r\n      this.masterTitle = data;\r\n      for (let each in data) {\r\n        masterTitlearray.push({ \"key\": each, \"value\": data[each] })\r\n        this.masterTitle = masterTitlearray;\r\n      }\r\n      console.log(this.masterTitle);\r\n\r\n    });\r\n\r\n    //Get Gender From Master Gender Table\r\n    let mastermasterGenderarray = [];\r\n    this.registrationService.getGender()\r\n      .subscribe((data: MasterGender[]) => {\r\n        this.masterGender = data;\r\n        for (let each in data) {\r\n          mastermasterGenderarray.push({ \"key\": each, \"value\": data[each] })\r\n          this.masterGender = mastermasterGenderarray;\r\n        }\r\n        console.log(this.masterGender);\r\n\r\n      });\r\n\r\n    //Get Natitionality From Master Nationality Table\r\n    let masterNationalityarray = [];\r\n    this.registrationService.getNationalities()\r\n      .subscribe((data: MasterNationality[]) => {\r\n        this.masterNationality = data;\r\n        for (let each in data) {\r\n          masterNationalityarray.push({ \"key\": each, \"value\": data[each] })\r\n\r\n          this.masterNationality = masterNationalityarray;\r\n\r\n        }\r\n        console.log(this.masterNationality);\r\n\r\n      });\r\n\r\n    //Get Occupation From Master Occupation Table\r\n    let masterOccupationarray = [];\r\n    this.registrationService.getOccupations()\r\n      .subscribe((data: MasterOccupation[]) => {\r\n        this.masterOccupation = data;\r\n        for (let each in data) {\r\n          masterOccupationarray.push({ \"key\": each, \"value\": data[each] })\r\n\r\n          this.masterOccupation = masterOccupationarray;\r\n\r\n        }\r\n        console.log(this.masterOccupation);\r\n\r\n      });\r\n\r\n    //Get Religion From Master Religion Table\r\n    let masterReligionarray = [];\r\n    this.registrationService.getReligions()\r\n      .subscribe((data: MasterReligion[]) => {\r\n        this.masterReligion = data;\r\n        for (let each in data) {\r\n          masterReligionarray.push({ \"key\": each, \"value\": data[each] })\r\n\r\n          this.masterReligion = masterReligionarray;\r\n\r\n        }\r\n        console.log(this.masterReligion);\r\n\r\n      });\r\n\r\n    //Get Bllod Group From Master Blood Group Table\r\n    let masterBloodGroupArray = [];\r\n    this.registrationService.getBloodgroups()\r\n      .subscribe((data: MasterBloodGroup[]) => {\r\n        this.masterBloodGrup = data;\r\n        for (let each in data) {\r\n          masterBloodGroupArray.push({ \"key\": each, \"value\": data[each] })\r\n          this.masterBloodGrup = masterBloodGroupArray;\r\n        }\r\n\r\n      });\r\n\r\n    //Get Marital Status From Master Marital Status Table\r\n    let masterMaritalStatusarray = [];\r\n    this.registrationService.getMaritalStatus()\r\n      .subscribe((data: MasterMaritalStatus[]) => {\r\n        this.masterMaritalStatus = data;\r\n        for (let each in data) {\r\n          masterMaritalStatusarray.push({ \"key\": each, \"value\": data[each] })\r\n\r\n          this.masterMaritalStatus = masterMaritalStatusarray;\r\n\r\n        }\r\n        console.log(this.masterMaritalStatus);\r\n\r\n      });\r\n\r\n  }\r\n\r\n  //Age Calculation From DOB\r\n  onselectedDob(dob: any) {\r\n    console.log(\"Date of Birth ......\" + dob)\r\n    if (dob != null && dob != undefined) {\r\n      var timeDiff = Math.abs(Date.now() - new Date(dob).getTime());\r\n      this.age = Math.floor(timeDiff / (1000 * 3600 * 24) / 365.25);\r\n      console.log(\"Age is ......\" + this.age)\r\n    } else {\r\n      this.age = 0;\r\n    }\r\n  }\r\n\r\n  //Get DOB From Age\r\n  onselectedAge(enteredAge: any) {\r\n    var CurrentYear = new Date().getFullYear();\r\n    var CurrentMonth = new Date().getMonth() + 1;\r\n    var CurrentDate = new Date().getDate();\r\n    if (enteredAge != '0' && enteredAge != '') {\r\n      var AgeYear = CurrentYear - enteredAge;\r\n      this.selectedDob = CurrentMonth + \"/\" + CurrentDate + \"/\" + AgeYear;\r\n      console.log(\"Date of Birth ......\" + this.selectedDob)\r\n    } else {\r\n      //this.selectedDob =CurrentMonth+\"/\"+ CurrentDate +\"/\"+CurrentYear;\r\n      //this.age=0;\r\n    }\r\n  }\r\n\r\n  //Get States based on Country\r\n  onselectedCountry(countryCode: any) {\r\n    console.log(\"Country code\" + countryCode)\r\n    if (countryCode != null && countryCode != undefined) {\r\n      this.countryFunction(countryCode);\r\n    }\r\n\r\n  }\r\n\r\n  countryFunction(countryCode: any) {\r\n    //this.modifiedText=val;\r\n\r\n    let team: MasterState = this.addForm.value;\r\n    console.log(\"team...\" + countryCode)\r\n    let array = [];\r\n    this.registrationService.getStates(countryCode)\r\n      .subscribe((data: MasterState[]) => {\r\n        this.masterState = data;\r\n        for (let each in data) {\r\n          array.push({ \"key\": each, \"value\": data[each] })\r\n          this.masterState = array;\r\n        }\r\n        console.log(this.masterState);\r\n      });\r\n\r\n  }\r\n\r\n  //Get Districts based on State\r\n  onselectedState(stateCode: any) {\r\n    console.log(\"State code....\" + stateCode)\r\n    if (stateCode != null && stateCode != undefined) {\r\n      this.stateFunction(stateCode);\r\n    }\r\n\r\n  }\r\n\r\n  stateFunction(stateCode: any) {\r\n    //this.modifiedText2=val;\r\n    console.log(\"State code\" + stateCode)\r\n    let team: MasterDistrict = this.addForm.value;\r\n    let array2 = [];\r\n    this.registrationService.getDistrict(stateCode).subscribe((data: MasterDistrict[]) => {\r\n      this.masterDistrict = data;\r\n      for (let each in data) {\r\n        array2.push({ \"key\": each, \"value\": data[each] })\r\n        this.masterDistrict = array2;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.addForm.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.addForm.invalid) {\r\n      console.log(\"Validations checking working...........\")\r\n      return;\r\n    }\r\n\r\n    this.registrationService.patientInsert(this.addForm.value)\r\n      .subscribe((data: Registration) => {\r\n        console.log(\"Name...\");\r\n        alert(\"Registration Success\");\r\n        this.resultMsg = \"Registration Success\";\r\n        this.addForm.reset();\r\n        this.submitted = false;\r\n\r\n        //this.router.navigate(['/registration']);\r\n      });\r\n\r\n\r\n  }\r\n//allows only numbers\r\n  _keyPress(event: any) {\r\n    const pattern = /[0-9]/;\r\n    let inputChar = String.fromCharCode(event.charCode);\r\n    if (!pattern.test(inputChar)) {\r\n        event.preventDefault();\r\n\r\n    }}\r\n\r\n  //For Collapse Address button\r\n  addressCollapse() {\r\n    this.isCollapsed = !this.isCollapsed;\r\n    this.submitted = false;\r\n  }\r\n  //For Collapse Miscellenous Info Button\r\n  miscellneousCollapse() {\r\n    this.ismiscellneousCollapse = !this.ismiscellneousCollapse;\r\n    this.submitted = false;\r\n  }\r\n  //For Collapse Family Details button\r\n  familyCollapse() {\r\n    this.isFamilyCollapse = !this.isFamilyCollapse;\r\n    this.submitted = false;\r\n  }\r\n\r\n  //For Reset values\r\n  clear() {\r\n    this.addForm.reset();\r\n    this.submitted = false;\r\n    this.resultMsg = \"\";\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {RegistrationRoutingModule} from './registration-routing.module';\r\nimport { PageHeaderModule } from './../../../../shared';\r\nimport {ReactiveFormsModule} from \"@angular/forms\";\r\nimport {RegistrationComponent} from './registration.component';\r\nimport{BsDatepickerModule} from 'ngx-bootstrap/datepicker';\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule, RegistrationRoutingModule, PageHeaderModule,ReactiveFormsModule,BsDatepickerModule.forRoot()],\r\n    declarations: [RegistrationComponent],\r\n  bootstrap: [RegistrationComponent],\r\n  \r\n\r\n})\r\nexport class RegistrationModule{}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter, switchMap } from 'rxjs/operators';\r\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\r\nimport { Registration } from \"../models/Registration\";\r\nimport { MembershipRegistration } from '../models/MembershipRegistration';\r\nimport{environment} from '../../../../../environments/environment.prod'\r\n\r\n//import {MasterCountry} from \"./masterCountry\";\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegistrationService {\r\n  // formVar: FormGroup;\r\n  // webPagesData:WebPagesData[];\r\n  base_Url=environment.base_Url\r\n  subreg=environment.sub_reg\r\n  submasterData=environment.sub_masterdata\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // masterCountry : MasterCountry[];\r\n  // getDetails():Observable<WebPagesData[]> {\r\n\r\n  // alert(\"in serveice\")\r\n  //  return this.http.get<WebPagesData[]>(this.url);\r\n  //  }\r\n\r\n  patientInsert(registration: MembershipRegistration): Observable<any> {\r\n    //getDetails(searchkey:String){\r\n    //return this.http.get(this.url);\r\n\r\n    console.log(registration.regCalculatedDob);\r\n    return this.http.post(this.base_Url+this.subreg+\"membershipRegistration\", registration);\r\n  }\r\n\r\n\r\n  // getPatientDetails(): Observable<MasterCountry[]> {\r\n  //       return this.http.get<MasterCountry[]>(this.getUrl);\r\n  //     }\r\n  // getPatientDetails() {\r\n  //       return this.http.get(this.getUrl).pipe(map((response: any) => response.json()));\r\n  //    }\r\n\r\n  getCountries() {\r\nconsole.log(\"\"+this.base_Url+this.submasterData)\r\n    return this.http.get(`${this.base_Url+this.submasterData+\"countriesApi\"}`);\r\n  }\r\n  getStates(country): Observable<any> {\r\n    return this.http.get(this.base_Url+this.submasterData+ \"getStatesByCountryApi/\" + country);\r\n  }\r\n  getDistrict(state): Observable<any> {\r\n    return this.http.get(this.base_Url+this.submasterData + \"getDistrictByStateApi/\" + state);\r\n  }\r\n\r\n  gettitles() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"titleApi\");\r\n  }\r\n  getGender() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"gendersApi\");\r\n  }\r\n  getBloodgroups() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"bloodGroupsApi\");\r\n  }\r\n  getNationalities() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"nationalitiesApi\");\r\n  }\r\n  getOccupations() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"occupationsApi\");\r\n  }\r\n\r\n  getReligions() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"religionsApi\");\r\n  }\r\n  getMaritalStatus() {\r\n    return this.http.get(this.base_Url+this.submasterData+\"maritalStatusApi\");\r\n  }\r\n\r\n}\r\n\r\n\r\n","export const environment = {\r\n  production: true,\r\n  base_Url:'http://localhost:8086/',\r\n  sub_masterdata:'masterDataApi/',\r\n  sub_reg:'registration/'\r\n};\r\n"],"sourceRoot":""}