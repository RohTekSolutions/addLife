{"version":3,"sources":["webpack:///./src/app/layout/form/admin/registration-worklist/registration-worklist-paging.service.ts","webpack:///./src/app/layout/form/admin/registration-worklist/registration-worklist.component.html","webpack:///./src/app/layout/form/admin/registration-worklist/registration-worklist.component.scss","webpack:///./src/app/layout/form/admin/registration-worklist/registration-worklist.component.ts","webpack:///./src/app/layout/form/admin/registration-worklist/registration-worklist.module.ts","webpack:///./src/app/layout/form/admin/registration-worklist/registration-worklistl-routing.module.ts"],"names":[],"mappings":"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","file":"form-admin-registration-worklist-registration-worklist-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter, switchMap } from 'rxjs/operators';\r\nimport { FormGroup, FormBuilder,FormControl } from '@angular/forms';\r\nimport {Registration} from \"../models/Registration\";\r\n//import {MasterCountry} from \"./masterCountry\";\r\nimport {MembershipRegistration} from '../models/MembershipRegistration';\r\nimport { CommonModelResponse } from '../models/responsemodel';\r\n\r\n\r\nconst httpOptions = {\r\n\theaders: new HttpHeaders({ 'Content-Type': 'application/json','Access-Control-Allow-Origin': '*' })\r\n  };\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RemotePagingService {\r\n  \r\n   getDataUrl = 'http://localhost:8086/getRegDetails';\r\n\r\n   cancelMemberUrl = 'http://localhost:8086/cancelMemberById';\r\n\r\n   getDataByDate = '';\r\n\r\n   \r\n \r\n  \r\n   constructor(private http: HttpClient) { }\r\n \r\n  \r\n   getData() {\r\n       \r\n     return this.http.get(`${this.getDataUrl}`);\r\n         }\r\n    // getMembershipDetailsBydate(membershipRegistration: MembershipRegistration): Observable<any> {\r\n\r\n    // //alert(\"Registartion No \"+reg);\r\n    // return this.http.get(this.getDataByDate + \"/\" + membershipRegistration).pipe(data => data);\r\n    \r\n    // }\r\n    cancelMember(r_id: number){\r\n\r\n      //alert(\"service calling cancell*****\"+r_id);\r\n      \r\n      return this.http.delete(this.cancelMemberUrl + '/' +r_id);\r\n\r\n\r\n    }\r\n  \r\n}\r\n\r\n\r\n","module.exports = \"<!-- <form [formGroup]=\\\"dateForm\\\" (ngSubmit)=\\\"checkDate()\\\" >\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-4\\\">\\r\\n    \\r\\n      <label>Start Date</label>\\r\\n      <input id=\\\"date1\\\" bsDatepicker class=\\\"form-control\\\" formControlName=\\\"date1\\\" name=\\\"start-date\\\"\\r\\n             format=\\\"dd/mm/yyyy\\\" data-date-format=\\\"dd/mm/yyyy\\\" />\\r\\n   \\r\\n      </div>\\r\\n      <div class=\\\"col-md-4\\\">\\r\\n      <label>End Date</label>\\r\\n      <input id=\\\"date2\\\" formControlName=\\\"date2\\\" bsDatepicker class=\\\"form-control\\\" name=\\\"end-date\\\"\\r\\n             format=\\\"dd/mm/yyyy\\\" data-date-format=\\\"dd/mm/yyyy\\\" />\\r\\n      </div>\\r\\n      <br>\\r\\n      <div class=\\\"col-md-4\\\">\\r\\n          <input type=\\\"button\\\" value=\\\"Check\\\" class=\\\"btn btn-sm btn-success\\\" />\\r\\n      </div>\\r\\n             <!-- onchange=\\\"checkDate()\\\" -->\\r\\n    <!--</div>\\r\\n    \\r\\n  </form> -->\\r\\n\\r\\n\\r\\n  <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-body\\\">\\r\\n  \\r\\n  <form  [formGroup]=\\\"dateForm\\\" (ngSubmit)=\\\"checkDate()\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            \\r\\n            <input id=\\\"date1\\\" bsDatepicker class=\\\"form-control\\\" formControlName=\\\"date1\\\" name=\\\"start-date\\\" placeholder=\\\"From Date\\\" format=\\\"dd/mm/yyyy\\\" data-date-format=\\\"dd/mm/yyyy\\\" />\\r\\n          </div>\\r\\n          <div class=\\\"col\\\">\\r\\n            \\r\\n              <input id=\\\"date2\\\" formControlName=\\\"date2\\\" bsDatepicker class=\\\"form-control\\\" placeholder=\\\"To Date\\\" name=\\\"end-date\\\" format=\\\"dd/mm/yyyy\\\" data-date-format=\\\"dd/mm/yyyy\\\" />\\r\\n           </div>\\r\\n          <div class=\\\"col\\\">\\r\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Search</button>\\r\\n          </div>\\r\\n       </div>\\r\\n  </form>\\r\\n \\r\\n\\r\\n<div class=\\\"membersGrid\\\" style=\\\"align-content:flex-end\\\">\\r\\n  <mat-form-field >\\r\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search............\\\">\\r\\n  </mat-form-field>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n<div class=\\\"example-container mat-elevation-z8\\\">\\r\\n\\r\\n  <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\r\\n\\r\\n    <!-- ID Column -->\\r\\n    <ng-container matColumnDef=\\\"RegistrationNumber\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header><b> Reg Number</b> </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\"> {{row.regNo}} </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Progress Column -->\\r\\n    <ng-container matColumnDef=\\\"PatientName\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header><b> Name</b> </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\"> {{row.regPatName}} </mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"MobileNo\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header> <b>Mobile No</b> </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\"> {{row.regMobileNo}} </mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"Email\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header><b> Email</b> </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\"> {{row.regEmail}} </mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"editPatient\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>  </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\"> <button class=\\\"btn btn-sm btn-success\\\" (click)=\\\"editUser(row)\\\" style=\\\"margin-left: 20px;\\\">Update</button> </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n    <ng-container matColumnDef=\\\"cancel\\\">\\r\\n      <mat-header-cell *matHeaderCellDef mat-sort-header>  </mat-header-cell>\\r\\n      <mat-cell *matCellDef=\\\"let row\\\"> <button class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"cancelUser(row)\\\" style=\\\"margin-left: 20px;\\\">cancel</button> </mat-cell>\\r\\n    </ng-container>\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\">\\r\\n    </mat-row>\\r\\n  </mat-table>\\r\\n\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\r\\n</div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from '@angular/material';\r\nimport {Router} from \"@angular/router\";\r\nimport {MembershipRegistration} from '../models/MembershipRegistration';\r\nimport { RemotePagingService } from \"./registration-worklist-paging.service\";\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {first} from \"rxjs/operators\";\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-grid-material',\r\n  templateUrl: './registration-worklist.component.html',\r\n  styleUrls: ['./registration-worklist.component.scss']\r\n})\r\nexport class GridMaterialComponent implements OnInit {\r\n  \r\n  displayedColumns = ['RegistrationNumber', 'PatientName','MobileNo','Email','editPatient','cancel'];\r\n  dataSource: MatTableDataSource<MembershipRegistration>;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  public users : MembershipRegistration [];\r\n  dateForm: FormGroup;\r\n  flag: boolean = false;\r\n\r\n  constructor(private formBuilder: FormBuilder,private dataService:RemotePagingService,private router: Router) { \r\n    //const users : Data []= [];\r\n    //console.log(\"hello\"+this.flag);\r\n    if(this.flag=true){\r\n      this.dataService.getData().subscribe((d: MembershipRegistration[]) => {\r\n      this.users = d;\r\n      this.dataSource = new MatTableDataSource(this.users);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n\r\n      //console.log(this.users);\r\n\r\n});\r\n}\r\n  }\r\n\r\n  \r\n  ngOnInit() {\r\n\r\n    // this.dataService.getData().subscribe(res => {\r\n    //   // Use MatTableDataSource for paginator\r\n    //   this.dataSource = new MatTableDataSource(this.users);\r\n    //   // Assign the paginator *after* dataSource is set\r\n    //   this.dataSource.paginator = this.paginator;\r\n    //   this.dataSource.sort = this.sort;\r\n    //});\r\n\r\n    this.dateForm = this.formBuilder.group({\r\n\r\n      \r\n      date1:[],\r\n      date2:[],\r\n\r\n   \r\n\r\n    })\r\n\r\n  \r\n  }\r\n\r\n\r\n  /**\r\n   * Set the paginator and sort after the view init since this component will\r\n   * be able to query its view for the initialized paginator and sort.\r\n   */\r\n  \r\n\r\n  applyFilter(filterValue: string) {\r\n    filterValue = filterValue.trim(); // Remove whitespace\r\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\r\n    this.dataSource.filter = filterValue;\r\n  }\r\n  // ngAfterViewInit() {\r\n  //   this.dataSource.paginator = this.paginator;\r\n  //   this.dataSource.sort = this.sort;\r\n  // }\r\n  editUser(row: MembershipRegistration): void {\r\n    //alert(\"calling update*****\"+row.registrationId.toString());\r\n     localStorage.removeItem(\"editUserId\");\r\n     localStorage.setItem(\"editUserId\", row.regNo.toString());\r\n     this.router.navigate(['edit-user']);\r\n   }\r\n\r\n\r\n   cancelUser(row: MembershipRegistration): void {\r\n    //alert(\"component cancell*****\"+row.regNo);\r\n    this.dataService.cancelMember(row.regNo).subscribe( data => {\r\n      this.users = this.users.filter(u => u !== row);\r\n    });\r\n\r\n    \r\n     \r\n   }\r\n\r\n  //  checkDate(){\r\n  //    if(this.flag){\r\n\r\n  //     this.dataService.getMembershipDetailsBydate(this.dateForm.value)\r\n  //     .pipe(first())\r\n  //     .subscribe((d: MembershipRegistration[]) => {\r\n  //       console.log(\"d1******\"+this.dateForm.value.date1);\r\n        \r\n  //       this.users = d;\r\n  //       this.dataSource = new MatTableDataSource(this.users);\r\n  //       this.dataSource.paginator = this.paginator;\r\n  //       this.dataSource.sort = this.sort;\r\n  //       this.router.navigate(['grid-material']);\r\n  //       },\r\n  //       error => {\r\n  //         alert(error);\r\n  //       });\r\n\r\n\r\n  //     alert(\"flag***********\"+this.flag)\r\n  // }\r\n    \r\n  //  }\r\n  \r\n\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {GridMaterialRoutingModule} from './registration-worklistl-routing.module';\r\nimport { PageHeaderModule } from '../../../../shared';\r\nimport {ReactiveFormsModule} from \"@angular/forms\";\r\nimport {GridMaterialComponent} from './registration-worklist.component';\r\nimport{BsDatepickerModule} from 'ngx-bootstrap/datepicker';\r\n\r\nimport { FormsModule }   from '@angular/forms';\r\n\r\nimport { MatInputModule, MatPaginatorModule, MatProgressSpinnerModule, \r\n  MatSortModule, MatTableModule } from \"@angular/material\";\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n    imports: [FormsModule,CommonModule,PageHeaderModule,GridMaterialRoutingModule,ReactiveFormsModule,BsDatepickerModule.forRoot(),\r\n\r\n      MatInputModule,\r\n      MatTableModule,\r\n      MatPaginatorModule,\r\n      MatSortModule,\r\n      MatProgressSpinnerModule\r\n    \r\n    \r\n    ],\r\n    declarations: [GridMaterialComponent],\r\n  bootstrap: [GridMaterialComponent],\r\n  \r\n\r\n})\r\nexport class GridMaterialModule{}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {GridMaterialComponent} from './registration-worklist.component';\r\n\r\nconst routes: Routes =[\r\n {\r\n    path: '',component:GridMaterialComponent\r\n }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class GridMaterialRoutingModule{\r\n    \r\n}"],"sourceRoot":""}