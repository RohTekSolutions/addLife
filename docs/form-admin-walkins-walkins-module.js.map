{"version":3,"sources":["webpack:///./src/app/layout/form/admin/walkins/walkins-routing.module.ts","webpack:///./src/app/layout/form/admin/walkins/walkins.component.html","webpack:///./src/app/layout/form/admin/walkins/walkins.component.scss","webpack:///./src/app/layout/form/admin/walkins/walkins.component.ts","webpack:///./src/app/layout/form/admin/walkins/walkins.module.ts","webpack:///./src/app/layout/form/admin/walkins/walkins.service.ts"],"names":[],"mappings":"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","file":"form-admin-walkins-walkins-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { WalkinsComponent } from './walkins.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: WalkinsComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class WalkinsRoutingModule {\r\n}\r\n","module.exports = \"<div *ngIf=\\\"resultMsg\\\">{{resultMsg}}</div>\\r\\n<form [formGroup]=\\\"walkinForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n  <div class=\\\"card-header titlecss\\\"><i class=\\\"fa fa-user-plus\\\" style=\\\"color:#ffff\\\">&nbsp;&nbsp;</i>Walkin</div><br>\\r\\n  <!-- Personal Information card Start-->\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header\\\">Walkin Details </div>\\r\\n\\r\\n    <div class=\\\"card-body\\\">\\r\\n\\r\\n      <div style=\\\"font-family: 'Gill Sans';color: rgb(102, 99, 99);\\\">Walkin No : <input type=\\\"text\\\" formControlName=\\\"\\\"></div>\\r\\n      <fieldset class=\\\"scheduler-border\\\">\\r\\n        <legend class=\\\"scheduler-border\\\">Please fill the details</legend>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col\\\">\\r\\n            <select formControlName=\\\"patTitle\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.patTitle.touched) && f.patTitle.errors }\\\">\\r\\n              <option value=\\\"\\\" disabled selected>Select Title</option>\\r\\n              <option *ngFor=\\\"let each of masterTitle\\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n            </select>\\r\\n            <div *ngIf=\\\"(submitted || f.patTitle.touched) && f.patTitle.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"f.patTitle.errors.required\\\">Title is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col\\\">\\r\\n              <input type=\\\"text\\\" formControlName=\\\"patLastName\\\" class=\\\"form-control\\\" placeholder=\\\"Family Name\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.patLastName.touched) && f.patLastName.errors }\\\" />\\r\\n              <div *ngIf=\\\" (submitted || f.patLastName.touched) && f.patLastName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.patLastName.errors.required\\\">Family Name is required</div>\\r\\n              </div>\\r\\n          </div>\\r\\n          <div class=\\\"col\\\">\\r\\n              <input type=\\\"text\\\" formControlName=\\\"patFirstName\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\"\\r\\n                  [ngClass]=\\\"{ 'is-invalid': (submitted || f.patFirstName.touched) && f.patFirstName.errors }\\\">\\r\\n              <div *ngIf=\\\"(submitted || f.patFirstName.touched) && f.patFirstName.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.patFirstName.errors.required\\\"> Name is required</div>\\r\\n              </div>\\r\\n          </div>\\r\\n        </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <select formControlName=\\\"patModeOfAppt\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.patModeOfAppt.touched) && f.patModeOfAppt.errors }\\\">\\r\\n                <option value=\\\"\\\" disabled selected>Select Mode Of Walkin</option>\\r\\n                <option value=\\\"Telephone\\\">Telephone</option>\\r\\n                <option value=\\\"Email\\\">Email</option>\\r\\n                <option value=\\\"By Person\\\">By Person</option>\\r\\n              </select>\\r\\n              <div *ngIf=\\\"(submitted || f.patModeOfAppt.touched) && f.patModeOfAppt.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"f.patModeOfAppt.errors.required\\\">Title is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col\\\">\\r\\n              <select formControlName=\\\"patSex\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.patSex.touched) && f.patSex.errors }\\\">\\r\\n                <option value=\\\"\\\" disabled selected>Select Sex</option>\\r\\n                <option *ngFor=\\\"let each of masterGender\\\" value=\\\"{{each.value}}\\\">{{each.value}}</option>\\r\\n              </select>\\r\\n              <div *ngIf=\\\"(submitted || f.patSex.touched) && f.patSex.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"f.patSex.errors.required\\\">Sex is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"col\\\"> \\r\\n                  <input type=\\\"text\\\" placeholder=\\\"DataOfBirth\\\" bsDatepicker formControlName=\\\"patDateOfBirth\\\"\\r\\n                            [(ngModel)]=\\\"selectedDob\\\" class=\\\"form-control\\\" (ngModelChange)=\\\"onselectedDob($event)\\\"\\r\\n                            [ngClass]=\\\"{ 'is-invalid': (submitted || f.patDateOfBirth.touched) && f.patDateOfBirth.errors }\\\" />\\r\\n\\r\\n                        <div *ngIf=\\\" (submitted || f.patDateOfBirth.touched) && f.patDateOfBirth.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                            <div *ngIf=\\\"f.patDateOfBirth.errors.required\\\"> Date Of Birth is required</div>\\r\\n                        </div>\\r\\n            </div>\\r\\n            <!-- <div class=\\\"col\\\">\\r\\n                    <input type=\\\"text\\\" formControlName=\\\"regPatmiddleName\\\" class=\\\"form-control\\\" placeholder=\\\"Middle Name\\\">\\r\\n                </div> -->\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n\\r\\n            <div class=\\\"col\\\">\\r\\n              <input type=\\\"text\\\" placeholder=\\\"Age\\\" formControlName=\\\"patAge\\\" (keypress)=_keyPress($event) [(ngModel)]=\\\"age\\\"\\r\\n              (ngModelChange)=\\\"onselectedAge($event)\\\" > \\r\\n              \\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col\\\">\\r\\n              <input type=\\\"text\\\" formControlName=\\\"patPhoneNo\\\" (keypress)=_keyPress($event) placeholder=\\\"Phone No\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.patPhoneNo.touched) && f.patPhoneNo.errors }\\\">\\r\\n              <div *ngIf=\\\"(submitted || f.patPhoneNo.touched) && f.patPhoneNo.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.patPhoneNo.errors.required\\\">Phone No is required</div>\\r\\n                  <div *ngIf=\\\"f.patPhoneNo.errors.maxlength\\\">Phone No Max 10 digits </div>\\r\\n                  <div *ngIf=\\\"f.patPhoneNo.errors.minlength\\\">Phone No Min 10 digits </div>\\r\\n                  <div *ngIf=\\\"f.patPhoneNo.errors.pattern\\\">Enter Valid Phone No </div>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n            <div class=\\\"col\\\">\\r\\n              <input type=\\\"text\\\" formControlName=\\\"patMobileNo\\\" placeholder=\\\"Mobile No\\\"  (keypress)=_keyPress($event)  class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.patMobileNo.touched) && f.patMobileNo.errors }\\\">\\r\\n              <div *ngIf=\\\"(submitted || f.patMobileNo.touched) && f.patMobileNo.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.patMobileNo.errors.required\\\">Mobile No is required</div>\\r\\n                  <div *ngIf=\\\"f.patMobileNo.errors.maxlength\\\">Mobile No Max 10 digits </div>\\r\\n                  <div *ngIf=\\\"f.patMobileNo.errors.minlength\\\">Mobile No Min 10 digits </div>\\r\\n                  <div *ngIf=\\\"f.patMobileNo.errors.pattern\\\">Enter Valid Mobile No</div>\\r\\n                 \\r\\n\\r\\n                </div>\\r\\n              \\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col\\\">\\r\\n              <select formControlName=\\\"docCode\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.docCode.touched) && f.docCode.errors }\\\">\\r\\n                <option value=\\\"\\\" disabled selected>Select Enquiry For</option>\\r\\n                <option *ngFor=\\\"let each of departmentNames\\\" value=\\\"{{each.key}}\\\">{{each.value}}</option>\\r\\n              </select>\\r\\n              <div *ngIf=\\\"(submitted || f.docCode.touched) && f.docCode.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"f.docCode.errors.required\\\">Enquiry For is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n              <div class=\\\"col\\\">\\r\\n                    <select formControlName=\\\"patReason\\\" class=\\\"select-dropdown form-control\\\" [ngClass]=\\\"{ 'is-invalid': (submitted || f.patReason.touched) && f.patReason.errors }\\\">\\r\\n                      <option value=\\\"\\\" disabled selected>How did you know about us?</option>\\r\\n                      <option value=\\\"Friends\\\">Friends</option>\\r\\n                      <option value=\\\"Ad\\\">Ad</option>\\r\\n                      <option value=\\\"Internet\\\">Internet</option>\\r\\n                      <option value=\\\"Referred by Hospital\\\">Referred by Hospital</option>\\r\\n                      <option value=\\\"Others\\\">Others</option>\\r\\n                    </select>\\r\\n                <div *ngIf=\\\"(submitted || f.patReason.touched) && f.patReason.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"f.patReason.errors.required\\\">How did you know about us? is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n          </div>\\r\\n        \\r\\n\\r\\n      </fieldset>\\r\\n      <div style=\\\"font-family: Gill Sans;\\\"><textarea class=\\\"form-control\\\" formControlName=\\\"remarks\\\" class=\\\"form-control\\\"\\r\\n        placeholder=\\\"Enter Remarks...\\\"></textarea></div>\\r\\n        <br>\\r\\n\\r\\n\\r\\n      <div style=\\\"float: right;\\\">\\r\\n        <button class=\\\"btn btn-outline-primary\\\" [disabled]=\\\"!walkinForm.valid\\\">Submit</button>&nbsp;&nbsp;\\r\\n        <button type=\\\"reset\\\" (click)=\\\"clear()\\\" class=\\\"btn btn-outline-primary\\\">Clear</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n  <!-- Personal Information card End-->\\r\\n\\r\\n</form>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators, PatternValidator} from \"@angular/forms\";\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { TokenStorageService } from '../../../../auth/token-storage.service';\r\nimport {MasterTitle} from \"../models/MasterTitle\";\r\nimport {MasterGender} from \"../models/MasterGender\";\r\nimport {AdminMsLabDepartment} from \"../models/AdminMsLabDepartment\";\r\nimport {WalkinsService } from './walkins.service';\r\nimport{WalkinDetails} from '../models/WalkinDetails'\r\n\r\n@Component({\r\n  selector: 'app-walkins',\r\n  templateUrl: './walkins.component.html',\r\n  styleUrls: ['./walkins.component.scss']\r\n})\r\nexport class WalkinsComponent implements OnInit {\r\n\r\n  constructor(private token: TokenStorageService,private walkinsService:WalkinsService,private formBuilder: FormBuilder,private route: ActivatedRoute,\r\n            private router: Router) { }\r\n   walkinDetails : WalkinDetails [];\r\n   masterTitle: Array<MasterTitle> = [];\r\n   masterGender: Array<MasterGender> = [];\r\n   departmentNames:Array<AdminMsLabDepartment>=[];\r\n  walkinForm: FormGroup;\r\n  isCollapsed:boolean=true;\r\n  submitted = false;\r\n  private resultMsg:String;\r\n  info: any;\r\n  public selectedDob: any;\r\n  public age: number;\r\n\r\n\r\n\r\n  ngOnInit() {\r\n    this.info = {\r\n    token: this.token.getToken(),\r\n    username: this.token.getUsername(),\r\n    authorities: this.token.getAuthorities()};\r\n    \r\n    \r\n    this.walkinForm = this.formBuilder.group({\r\n    walkinNo: [''],\r\n    patTitle:['', Validators.required],\r\n    patLastName:['', Validators.required],\r\n    patFirstName: ['', Validators.required],\r\n    patModeOfAppt:['', Validators.required],\r\n    patSex: ['', Validators.required],\r\n    patDateOfBirth: ['', Validators.required],\r\n    patAge:  [],\r\n    patPhoneNo: ['',[Validators.required,Validators.maxLength(10),Validators.minLength(10),Validators.pattern(/^[6-9]\\d{9}$/)]],\r\n    patMobileNo:['', [Validators.required,Validators.maxLength(10),Validators.minLength(10),Validators.pattern(/^[6-9]\\d{9}$/)]],\r\n    docCode:['',Validators.required],\r\n    remarks:[],\r\n    patReason:['',Validators.required]})\r\n    \r\n\r\n    \r\n    \r\n    let masterTitlearray=[];\r\n    this.walkinsService.gettitles().subscribe((data: MasterTitle[]) => {\r\n        this.masterTitle = data;\r\n        for(let each in data){\r\n          masterTitlearray.push({\"key\":each,\"value\":data[each]})\r\n          this.masterTitle = masterTitlearray;\r\n        }\r\n        console.log(this.masterTitle);\r\n  \r\n  });\r\n\r\n  \r\n  let mastermasterGenderarray=[];\r\n  this.walkinsService.getGender()\r\n    .subscribe((data: MasterGender[]) => {\r\n      this.masterGender = data;\r\n  for(let each in data){\r\n    mastermasterGenderarray.push({\"key\":each,\"value\":data[each]}) \r\n  this.masterGender = mastermasterGenderarray; \r\n  }\r\n  console.log(this.masterGender);\r\n\r\n});\r\n\r\n  \r\n    let departmentNamesarray=[];\r\n    this.walkinsService.getDepartment().subscribe((data: AdminMsLabDepartment[]) => {\r\n    this.departmentNames = data;\r\n    for(let each in data){\r\n      departmentNamesarray.push({\"key\":each,\"value\":data[each]}) \r\n    this.departmentNames = departmentNamesarray; \r\n    }\r\n    console.log(this.departmentNames);\r\n\r\n    });\r\n \r\n  }\r\n  //Age Calculation From DOB\r\n  onselectedDob(dob: any) {\r\n    console.log(\"Date of Birth ......\" + dob)\r\n    if (dob != null && dob != undefined) {\r\n      var timeDiff = Math.abs(Date.now() - new Date(dob).getTime());\r\n      this.age = Math.floor(timeDiff / (1000 * 3600 * 24) / 365.25);\r\n      console.log(\"Age is ......\" + this.age)\r\n    } else {\r\n      this.age = 0;\r\n    }\r\n  }\r\n\r\n  //Get DOB From Age\r\n  onselectedAge(enteredAge: any) {\r\n    var CurrentYear = new Date().getFullYear();\r\n    var CurrentMonth = new Date().getMonth() + 1;\r\n    var CurrentDate = new Date().getDate();\r\n    if (enteredAge != '0' && enteredAge != '') {\r\n      var AgeYear = CurrentYear - enteredAge;\r\n      this.selectedDob = CurrentMonth + \"/\" + CurrentDate + \"/\" + AgeYear;\r\n      console.log(\"Date of Birth ......\" + this.selectedDob)\r\n    } else {\r\n      //this.selectedDob =CurrentMonth+\"/\"+ CurrentDate +\"/\"+CurrentYear;\r\n      //this.age=0;\r\n    }\r\n  }\r\n\r\n\r\n  get f() { return this.walkinForm.controls; }\r\n  onSubmit(){\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.walkinForm.invalid) {\r\n     \r\n        return;\r\n    }\r\n    this.walkinsService.patientInsert(this.walkinForm.value)\r\n    .subscribe( (data:WalkinDetails)=> {\r\n      \r\n        this.walkinForm.reset\r\n    });\r\n  \r\n\r\n    \r\n\r\n  }\r\n  //allows only numbers\r\n  _keyPress(event: any) {\r\n    const pattern = /[0-9]/;\r\n    let inputChar = String.fromCharCode(event.charCode);\r\n    if (!pattern.test(inputChar)) {\r\n        event.preventDefault();\r\n\r\n    }}\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { WalkinsRoutingModule } from './walkins-routing.module';\r\nimport { PageHeaderModule } from './../../../../shared';\r\nimport {ReactiveFormsModule} from \"@angular/forms\";\r\nimport { WalkinsComponent } from './walkins.component';\r\nimport{BsDatepickerModule} from 'ngx-bootstrap/datepicker';\r\n\r\n\r\n@NgModule({\r\n    imports: [CommonModule, WalkinsRoutingModule, PageHeaderModule,ReactiveFormsModule,BsDatepickerModule.forRoot()],\r\n    declarations: [WalkinsComponent],\r\n    bootstrap:[WalkinsComponent]\r\n})\r\nexport class WalkinsModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter, switchMap } from 'rxjs/operators';\r\nimport { FormGroup, FormBuilder,FormControl } from '@angular/forms';\r\nimport {WalkinDetails} from \"../models/WalkinDetails\";\r\n\r\nimport { environment } from '../../../../../environments/environment';\r\n//import {MasterCountry} from \"./masterCountry\";\r\n\r\nconst httpOptions = {\r\n\theaders: new HttpHeaders({ 'Content-Type': 'application/json','Access-Control-Allow-Origin': '*' })\r\n  };\r\n\r\n  \r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n  \r\n   \r\n})\r\n\r\nexport class WalkinsService {\r\n  base_Url=environment.base_Url;\r\n  sub_master_Url=environment.sub_masterdata;\r\n   // formVar: FormGroup;\r\n   // webPagesData:WebPagesData[];\r\n  \r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  patientInsert(walkindetails:WalkinDetails): Observable<any> {\r\n       \r\n    return this.http.post(this.base_Url+'createWalkin',walkindetails); \r\n       \r\n  }\r\n\r\n  \r\n\r\n  gettitles(){\r\n      return this.http.get(this.base_Url+this.sub_master_Url+'titleApi');\r\n        }\r\n  getGender(){\r\n      return this.http.get(this.base_Url+this.sub_master_Url+'gendersApi');\r\n        }\r\n  getDepartment(){\r\n     return this.http.get(this.base_Url+'getMsLabDepartmentNames')\r\n  }\r\n\r\n}\r\n\r\n\r\n"],"sourceRoot":""}